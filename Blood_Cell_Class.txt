def getNeighborValues(i,j, board):
    # The following list contains the indices of the neighbors for a pixel at (i.j)
    neighborhood = [(i-1, j), (i, j-1), (i+1, j), (i, j+1)]
    
    neighbor_values = []
    for neighbor in neighborhood:
        if onBoard(neighbor[0], neighbor[1], board) == True:
            neighbor_values.append(board[neighbor[0],neighbor[1]])
    return neighbor_values


class blood_cell():
    '''
    This is the blood cells class and it allows the blood cells to move around as well as absorb oxygen and carbon dioxide.
    '''
    
    def __init__(self, shape='round', molecule, x_dim, y_dim): #We could change the shape attribute to an oxygen capacity attribute
        self.shape = shape
        self.molecule = molecule
        self.x_dim = random.randint(0, x_dim)
        self.y_dim = random.randint(0, y_dim)
        
        if self.shape == 'round':
            oxygen_cap = 6
            carbon_cap = 5
        elif self.shape == 'sickle':
            oxygen_cap = 3
            carbon_cap = 2
        
        self.oxygen_cap = oxygen_cap
        self.carbon_cap = carbon_cap
        
    def transfer(self):
        # Determine if blood cell is in lungs using nearest neighbor, if it is then it picks up the maximum amount of oxygen and releases
        # CO2
      
        # Determine if blood cell is in an organ using nearest neighbor, if it is then it picks up the max amount of CO2 and releases
        # oxygen
        neighbors = getNeighborValues(self.x_dim, self.y_dim, board)
        lung = []
        for i in 
        pass
    
    def travel(self, board):
        pathway = getNeighborValues(self.pos[0], self.pos[1], board)
        
        surround
        if pathway[i,j] == 3 
        
        for i in range(board.shape[0]-1):
            for j in range(board.shape[1]-1):
                if
    